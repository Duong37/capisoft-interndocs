{
    "openapi": "3.0.3",
    "info": {
        "title": "Todo API",
        "version": "1.0.0",
        "description": "A RESTful API for managing Todo Lists and Items"
    },
    "paths": {
        "/api/todoitems/": {
            "get": {
                "operationId": "todoitems_list",
                "tags": [
                    "todoitems"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TodoItem"
                                    }
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "todoitems_create",
                "tags": [
                    "todoitems"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TodoItem"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/TodoItem"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/TodoItem"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TodoItem"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/todoitems/{id}/": {
            "get": {
                "operationId": "todoitems_retrieve",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "todoitems"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TodoItem"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "put": {
                "operationId": "todoitems_update",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "todoitems"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TodoItem"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/TodoItem"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/TodoItem"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TodoItem"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "todoitems_partial_update",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "todoitems"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedTodoItem"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedTodoItem"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedTodoItem"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TodoItem"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "todoitems_destroy",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "todoitems"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/todoitems/assigned_to_me/": {
            "get": {
                "operationId": "todoitems_assigned_to_me_retrieve",
                "description": "Get all TodoItems assigned to the current user.",
                "tags": [
                    "todoitems"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TodoItem"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/todolists/": {
            "get": {
                "operationId": "todolists_list",
                "tags": [
                    "todolists"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TodoList"
                                    }
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "todolists_create",
                "tags": [
                    "todolists"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TodoList"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/TodoList"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/TodoList"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TodoList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/todolists/{id}/": {
            "get": {
                "operationId": "todolists_retrieve",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "todolists"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TodoList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "put": {
                "operationId": "todolists_update",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "todolists"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TodoList"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/TodoList"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/TodoList"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TodoList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "todolists_partial_update",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "todolists"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedTodoList"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedTodoList"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedTodoList"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TodoList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "todolists_destroy",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "todolists"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/api/users/": {
            "get": {
                "operationId": "users_list",
                "description": "Get a list of all users with safe fields only. Public endpoint.",
                "tags": [
                    "users"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    }
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/users/auth/me/": {
            "get": {
                "operationId": "users_auth_me_retrieve",
                "description": "Get current authenticated user information. Validates Firebase token and returns Django user data.",
                "tags": [
                    "users"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/users/auth/register/": {
            "post": {
                "operationId": "users_auth_register_create",
                "description": "Register a new user account. Creates both Firebase and Django user.",
                "tags": [
                    "users"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserRegistration"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/UserRegistration"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/UserRegistration"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/api/users/auth/register-admin/": {
            "post": {
                "operationId": "users_auth_register_admin_create",
                "description": "Register a new admin user account. Requires valid admin registration code.",
                "tags": [
                    "users"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AdminRegistration"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/AdminRegistration"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/AdminRegistration"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "AdminRegistration": {
                "type": "object",
                "description": "Input validation and data transformation for admin user registration.\n\nResponsibilities:\n- Validates required fields (email, first_name, last_name)\n- Confirms password match and minimum length\n- Delegates actual admin user creation to services layer\n\nUse case: POST /api/users/auth/register-admin/",
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email",
                        "maxLength": 254
                    },
                    "password": {
                        "type": "string",
                        "writeOnly": true,
                        "minLength": 6
                    },
                    "confirm_password": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "first_name": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "last_name": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "phone": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 20
                    },
                    "birthday": {
                        "type": "string",
                        "format": "date",
                        "nullable": true
                    }
                },
                "required": [
                    "confirm_password",
                    "email",
                    "first_name",
                    "last_name",
                    "password"
                ]
            },
            "PatchedTodoItem": {
                "type": "object",
                "description": "A ModelSerializer that takes additional arguments for\n\"fields\", \"omit\" and \"expand\" in order to\ncontrol which fields are displayed, and whether to replace simple\nvalues with complex, nested serializations",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "title": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "description": {
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/StatusEnum"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "last_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "assignee": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    }
                }
            },
            "PatchedTodoList": {
                "type": "object",
                "description": "A ModelSerializer that takes additional arguments for\n\"fields\", \"omit\" and \"expand\" in order to\ncontrol which fields are displayed, and whether to replace simple\nvalues with complex, nested serializations",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "last_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "owner": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                }
            },
            "StatusEnum": {
                "enum": [
                    "PENDING",
                    "IN_PROGRESS",
                    "DONE"
                ],
                "type": "string",
                "description": "* `PENDING` - Pending\n* `IN_PROGRESS` - In Progress\n* `DONE` - Done"
            },
            "TodoItem": {
                "type": "object",
                "description": "A ModelSerializer that takes additional arguments for\n\"fields\", \"omit\" and \"expand\" in order to\ncontrol which fields are displayed, and whether to replace simple\nvalues with complex, nested serializations",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "title": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "description": {
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/StatusEnum"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "last_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "assignee": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    }
                },
                "required": [
                    "created_at",
                    "description",
                    "id",
                    "last_modified",
                    "title"
                ]
            },
            "TodoList": {
                "type": "object",
                "description": "A ModelSerializer that takes additional arguments for\n\"fields\", \"omit\" and \"expand\" in order to\ncontrol which fields are displayed, and whether to replace simple\nvalues with complex, nested serializations",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "last_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "owner": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                },
                "required": [
                    "created_at",
                    "id",
                    "last_modified"
                ]
            },
            "User": {
                "type": "object",
                "description": "Purpose: Serialize/deserialize existing user data for API responses,\ndisplay existing user information\nUse case: GET /api/users/ (public user listing)",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "maxLength": 254
                    },
                    "phone": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 20
                    },
                    "first_name": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "last_name": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "birthday": {
                        "type": "string",
                        "format": "date",
                        "nullable": true
                    },
                    "is_active": {
                        "type": "boolean"
                    },
                    "user_type": {
                        "$ref": "#/components/schemas/UserTypeEnum"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "last_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "required": [
                    "created_at",
                    "email",
                    "first_name",
                    "id",
                    "last_modified",
                    "last_name"
                ]
            },
            "UserRegistration": {
                "type": "object",
                "description": "Input validation and data transformation for user registration.\n\nResponsibilities:\n- Validates required fields (email, first_name, last_name)\n- Confirms password match\n- Ensures minimum password length (6 characters)\n- Delegates actual user creation to services layer\n\nUse case: POST /api/users/auth/register/",
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email",
                        "maxLength": 254
                    },
                    "password": {
                        "type": "string",
                        "writeOnly": true,
                        "minLength": 6
                    },
                    "confirm_password": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "first_name": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "last_name": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "phone": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 20
                    },
                    "birthday": {
                        "type": "string",
                        "format": "date",
                        "nullable": true
                    }
                },
                "required": [
                    "confirm_password",
                    "email",
                    "first_name",
                    "last_name",
                    "password"
                ]
            },
            "UserTypeEnum": {
                "enum": [
                    "USER",
                    "ADMIN"
                ],
                "type": "string",
                "description": "* `USER` - User\n* `ADMIN` - Admin"
            }
        }
    }
}